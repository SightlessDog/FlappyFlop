using UnityEngine;
using System;
using GamePlay;
using static GamePlay.CharacterState;
using static Managers.Properties;

public class EnemiesGenerator : MonoBehaviour
{
    [SerializeField] private float sendTimer = 0;
    // Use the same frequency
    [SerializeField] private float frequency = OBSTACLE_FREQUENCY;
    [SerializeField] private bool noEnemies;
    [SerializeField] private GameObject parent;
    [SerializeField] private CharacterState currentCharacterState;

    public GameObject myEnemy;
    public GameObject myObstacle;
    public GameObject mainCharacter;

    private bool started;

    void Awake()
    {
        noEnemies = false;
        parent = GameObject.FindGameObjectWithTag("AutoGenerated");
        UpdateCurrentCharacterState();
        GameManager.onGameStateChanged += StartGame;
    }

    void OnDestroy()
    {
        GameManager.onGameStateChanged -= StartGame;
    }

    void StartGame(State state)
    {
        started = state == State.PLAY;
    }

    // Update is called once per frame
    void Update()
    {
        UpdateCurrentCharacterState();
        if (started)
        {
            // Create no enemies in cheat mode
            if (!noEnemies)
            {
                SendEnemies();
            }
        }
    }

    /// <summary>
    /// Send Enemies to the game play
    /// </summary>
    private void SendEnemies()
    {
        sendTimer -= Time.deltaTime;
        //enemies will be sent when the timer reach 0, then reset the timer = frequency
        if (sendTimer <= 0)
        {
            GenerateEnemies();
            sendTimer = frequency;
        }
    }

    private void GenerateEnemies()
    { 
        switch (currentCharacterState)
            {
                case LEFT:
                CreateEnemies(DISTANCE_LEFT);
                    break;
                case MIDDLE:
                CreateEnemies(0);
                    break;
                case RIGHT:
                CreateEnemies(-DISTANCE_RIGHT);
                    break;
                case DEAD:
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
        }
    }

    /// <summary>
    /// Toggle Cheat mode
    /// </summary>
    public void ToggleNoEnemiesMode()
    {
        noEnemies = !noEnemies;
    }

    /// <summary>
    /// Create enemies 
    /// </summary>
    private void CreateEnemies(float xPos)
    {
        // yPos will be the y value of the checkpoint
        var yPos = GameObject.FindGameObjectWithTag("Checkpoint").transform.position.y;
        var zPos = GameObject.FindGameObjectWithTag("Checkpoint").transform.position.z;
        transform.position = new Vector3(xPos, yPos + 1f , zPos - 40);
        Instantiate(myEnemy, transform.position, transform.rotation, parent.transform);
    }

    /// <summary>
    /// Update current State of the character
    /// </summary>
    private void UpdateCurrentCharacterState()
    {
        if (mainCharacter != null)
        {
            currentCharacterState = mainCharacter.GetComponent<CharacterController>().currentState;
        }
    }
}
